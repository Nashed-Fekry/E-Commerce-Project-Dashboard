@model DTO.ChangePasswordDTO

@{
    ViewData["Title"] = "Change Password";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="text-center mb-4">Change Password</h2>
            <form asp-action="ChangePassword" class="needs-validation" novalidate>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="OldPassword" class="control-label">Old Password</label>
                    <input asp-for="OldPassword" class="form-control" required />
                    <span asp-validation-for="OldPassword" class="text-danger"></span>
                    <div class="invalid-feedback">Please enter your old password.</div>
                </div>
                <div class="form-group">
                    <label asp-for="NewPassword" class="control-label">New Password</label>
                    <input asp-for="NewPassword" class="form-control" required />
                    <span asp-validation-for="NewPassword" class="text-danger"></span>
                    <div class="invalid-feedback">Please enter a new password.</div>
                </div>
                <div class="form-group">
                    <label asp-for="ConfirmPassword" class="control-label">Confirm New Password</label>
                    <input asp-for="ConfirmPassword" class="form-control" required />
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                    <div class="invalid-feedback">Please confirm your new password.</div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block">Change Password</button>
                </div>
            </form>
            <div class="text-center">
                <a class="mx-3" asp-action="Index" asp-controller="Home">Back to List</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Bootstrap validation setup
        (function () {
            'use strict';

            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');

                // Loop over them and prevent submission
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}
